import"core-js/modules/es.string.trim";function _objectSpread(target){for(var i=1;i<arguments.length;i++){var source=arguments[i]!=null?arguments[i]:{};var ownKeys=Object.keys(source);if(typeof Object.getOwnPropertySymbols==="function"){ownKeys=ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function(sym){return Object.getOwnPropertyDescriptor(source,sym).enumerable}))}ownKeys.forEach(function(key){_defineProperty(target,key,source[key])})}return target}function _defineProperty(obj,key,value){if(key in obj){Object.defineProperty(obj,key,{value:value,enumerable:true,configurable:true,writable:true})}else{obj[key]=value}return obj}import parseHeader from"./parseHeader.mjs";import parseUtterances from"./parseUtterances.mjs";export default function scription2dlx(){let scription=arguments.length>0&&arguments[0]!==undefined?arguments[0]:"";let _ref=arguments.length>1&&arguments[1]!==undefined?arguments[1]:{},parser=_ref.parser;const isEmpty=scription.trim()==="";if(isEmpty)return{};const header=parseHeader(scription,parser);const utterances=parseUtterances(scription);return _objectSpread({},header,{utterances})}