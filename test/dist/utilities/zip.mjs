import"core-js/modules/es.symbol.description";import"core-js/modules/es.array.iterator";import"core-js/modules/web.dom-collections.iterator";function _slicedToArray(arr,i){return _arrayWithHoles(arr)||_iterableToArrayLimit(arr,i)||_nonIterableRest()}function _nonIterableRest(){throw new TypeError("Invalid attempt to destructure non-iterable instance")}function _iterableToArrayLimit(arr,i){var _arr=[];var _n=true;var _d=false;var _e=undefined;try{for(var _i=arr[Symbol.iterator](),_s;!(_n=(_s=_i.next()).done);_n=true){_arr.push(_s.value);if(i&&_arr.length===i)break}}catch(err){_d=true;_e=err}finally{try{if(!_n&&_i["return"]!=null)_i["return"]()}finally{if(_d)throw _e}}return _arr}function _arrayWithHoles(arr){if(Array.isArray(arr))return arr}export default function zip(hash){const numItems=Math.max(...Object.values(hash).map(w=>w.length));const items=[];for(let i=0;i<numItems;i++){const item=Object.entries(hash).reduce((o,_ref)=>{let _ref2=_slicedToArray(_ref,2),key=_ref2[0],arr=_ref2[1];o[key]=arr[i];return o},{});items.push(item)}return items}