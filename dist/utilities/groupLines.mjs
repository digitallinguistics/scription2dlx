import"core-js/modules/es.symbol.description";import"core-js/modules/es.array.iterator";import"core-js/modules/es.string.replace";import"core-js/modules/web.dom-collections.iterator";function _slicedToArray(arr,i){return _arrayWithHoles(arr)||_iterableToArrayLimit(arr,i)||_nonIterableRest()}function _nonIterableRest(){throw new TypeError("Invalid attempt to destructure non-iterable instance")}function _iterableToArrayLimit(arr,i){var _arr=[];var _n=true;var _d=false;var _e=undefined;try{for(var _i=arr[Symbol.iterator](),_s;!(_n=(_s=_i.next()).done);_n=true){_arr.push(_s.value);if(i&&_arr.length===i)break}}catch(err){_d=true;_e=err}finally{try{if(!_n&&_i["return"]!=null)_i["return"]()}finally{if(_d)throw _e}}return _arr}function _arrayWithHoles(arr){if(Array.isArray(arr))return arr}import getLines from"./getLines.mjs";export default function groupLines(type,linesHash){const typedLines=getLines([type],linesHash);if(!typedLines)return null;const codes=Object.keys(typedLines);const isString=codes.length===1&&codes[0]===type;if(isString)return linesHash[type];return Object.entries(typedLines).reduce((hash,_ref)=>{let _ref2=_slicedToArray(_ref,2),code=_ref2[0],data=_ref2[1];const subtype=code.replace("".concat(type,"-"),"");hash[subtype]=data;return hash},{})}