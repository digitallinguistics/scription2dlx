import"core-js/modules/es.array.iterator";import"core-js/modules/es.string.replace";import"core-js/modules/es.string.split";import"core-js/modules/es.string.trim";import"core-js/modules/web.dom-collections.iterator";import getCode from"./getCode.mjs";import getLineType from"./getLineType.mjs";import isString from"./isString.mjs";import isValidCode from"./isValidCode.mjs";function validateSchema(rawCodes){const someLinesHaveCodes=rawCodes.some(code=>isString(code));const allLinesHaveCodes=rawCodes.every(code=>isString(code));if(someLinesHaveCodes&&!allLinesHaveCodes){throw new Error("If one line in an utterance has a backslash code, all lines in the utterance must have backslash codes.")}const codes=rawCodes.filter(Boolean);const types=codes.map(getLineType);codes.forEach(code=>{if(!isValidCode(code)){throw new Error("The backslash code ".concat(code," is invalid. Only characters A-Z, a-z, 0-9, and hyphens are allowed. Diacritics are not permitted."))}});const codeCounts=codes.reduce((counts,code)=>{const currentCount=counts.get(code)||0;counts.set(code,currentCount+1);return counts},new Map);codeCounts.forEach((count,code)=>{if(code!=="n"&&count>1){throw new Error("The ".concat(code," code appears more than once in the utterance. Each backslash code may only appear once."))}});const hasMorphemes=types.some(type=>type==="m");const hasGlosses=types.some(type=>type==="gl");if((hasMorphemes||hasGlosses)&&!(hasMorphemes&&hasGlosses)){throw new Error("If either the morphemes or glosses line is present, the other must be present as well.")}}function numberNotes(code,i){const type=getLineType(code);if(type!=="n")return code;return code.replace("n","n-".concat(i+1))}export default function getSchema(utteranceString){try{const newlineRegExp=/\r?\n/g;const lines=utteranceString.split(newlineRegExp).map(line=>line.trim());const codes=lines.map(getCode);validateSchema(codes);const hasCodes=codes.filter(Boolean).length;if(!hasCodes){const lineCount=lines.length;if(lineCount===2)return["txn","tln"];if(lineCount===3)return["m","gl","tln"];if(lineCount>=4)return["txn","m","gl","tln"].fill("n",4);throw new Error("Cannot infer an interlinear gloss schema for utterances with one line.")}return codes.map(numberNotes)}catch(e){e.name=getSchema.name;e.message="".concat(e.message,"\n\nUtterance text:\n\n").concat(utteranceString);throw e}}