import"core-js/modules/es.symbol.description";import"core-js/modules/es.array.iterator";import"core-js/modules/es.object.from-entries";import"core-js/modules/es.string.ends-with";import"core-js/modules/es.string.starts-with";import"core-js/modules/es.string.trim";import"core-js/modules/web.dom-collections.iterator";function _slicedToArray(arr,i){return _arrayWithHoles(arr)||_iterableToArrayLimit(arr,i)||_nonIterableRest()}function _nonIterableRest(){throw new TypeError("Invalid attempt to destructure non-iterable instance")}function _iterableToArrayLimit(arr,i){var _arr=[];var _n=true;var _d=false;var _e=undefined;try{for(var _i=arr[Symbol.iterator](),_s;!(_n=(_s=_i.next()).done);_n=true){_arr.push(_s.value);if(i&&_arr.length===i)break}}catch(err){_d=true;_e=err}finally{try{if(!_n&&_i["return"]!=null)_i["return"]()}finally{if(_d)throw _e}}return _arr}function _arrayWithHoles(arr){if(Array.isArray(arr))return arr}import isString from"./isString.mjs";const bracketTypes={lit:["[","]"],phon:["[","]"],txn:["/","/"]};function trimBrackets(start,end,str){if(str.startsWith(start)&&str.endsWith(end)){return str.slice(1,str.length-1).trim()}return str}export default function cleanBrackets(type,data){const brackets=bracketTypes[type];if(isString(data))return trimBrackets(...brackets,data);const trimmedEntries=Object.entries(data).map((_ref)=>{let _ref2=_slicedToArray(_ref,2),lang=_ref2[0],text=_ref2[1];return[lang,trimBrackets(...brackets,text)]});return Object.fromEntries(trimmedEntries)}